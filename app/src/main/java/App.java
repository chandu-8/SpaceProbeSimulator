/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.application.ConditionalFeature;
import javafx.application.Platform;
import javafx.beans.property.DoubleProperty;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.scene.*;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.input.ScrollEvent;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Sphere;
import javafx.scene.transform.Rotate;
import javafx.stage.Stage;
import titan.interfaces.BodyInterface;
import titan.landing.Landing2D;
import titan.math.Vector3d;
import titan.probe.ProbeSimulator;

public class App extends Application{
  public final int WIDTH = 700;
  public final int HEIGHT = 500;
  private double anchorX, anchorY;
  private double anchorAngleX, anchorAngleY;
  private final DoubleProperty angleX = new SimpleDoubleProperty(0);
  private final DoubleProperty angleY = new SimpleDoubleProperty(0);
  BodyInterface focus;
  double zoom = 7;
  boolean buttonPressed = true;
  boolean stayZoomed = true;
  PerspectiveCamera camera;
  int updateFactor = 1;
  int time;
  boolean pause = false;
  boolean set = false;
  /*
  Main method for launching Run
  */
  public static void main(String[] args) {
    launch(args);
  }

  public void start(Stage primaryStage) {

    boolean is3DSupported = Platform.isSupported(ConditionalFeature.SCENE3D);
    if(!is3DSupported) {
      System.out.println("Sorry, 3D is not supported in JavaFX on this platform.");
      return;
    }


    //3D
    ProbeSimulator simulation = new ProbeSimulator();
    simulation.solarSystem.translateXProperty().set(WIDTH/2);
    simulation.solarSystem.translateYProperty().set(HEIGHT/2);
    camera = new PerspectiveCamera();
    camera.translateZProperty().set(-7000);
    Group root3D = new Group(simulation.solarSystem);
    SubScene subScene = new SubScene(root3D, WIDTH, HEIGHT, true, SceneAntialiasing.BALANCED);
    subScene.setCamera(camera);
    camera.setFarClip(1e4);
    subScene.setFill(Color.BLACK);

    //2D
    VBox pane = new VBox();


    //Buttons
    HBox buttonBox = new HBox();
    focus = simulation.rocket;
    //Sun
    Button sun = new Button("Sun");
    sun.setOnAction(e ->{
      focus = simulation.solarSystem.planets[0];
      zoom = 70000;
      buttonPressed = true;
      stayZoomed = false;
    });
    buttonBox.getChildren().add(sun);
    //Earth
    Button earth = new Button("Earth");
    earth.setOnAction(e ->{
      focus = simulation.solarSystem.planets[1];
      zoom = 700;
      buttonPressed = true;
      stayZoomed = false;
    });
    buttonBox.getChildren().add(earth);

    //Mercury
    Button mercury = new Button("Mercury");
    mercury.setOnAction(e ->{
      focus = simulation.solarSystem.planets[2];
      zoom = 700;
      buttonPressed = true;
      stayZoomed = false;
    });
    buttonBox.getChildren().add(mercury);

    //Venus
    Button venus = new Button("Venus");
    venus.setOnAction(e ->{
      focus = simulation.solarSystem.planets[3];
      zoom = 700;
      buttonPressed = true;
      stayZoomed = false;
    });
    buttonBox.getChildren().add(venus);

    //Moon
    Button moon = new Button("Moon");
    moon.setOnAction(e ->{
      focus = simulation.solarSystem.planets[4];
      zoom = 700;
      buttonPressed = true;
      stayZoomed = false;
    });
    buttonBox.getChildren().add(moon);
    //Mars
    Button mars = new Button("Mars");
    mars.setOnAction(e ->{
      focus = simulation.solarSystem.planets[5];
      zoom = 700;
      buttonPressed = true;
      stayZoomed = false;
    });
    buttonBox.getChildren().add(mars);
    //jupiter
    Button jupiter = new Button("Jupiter");
    jupiter.setOnAction(e ->{
      focus = simulation.solarSystem.planets[6];
      zoom = 700;
      buttonPressed = true;
      stayZoomed = false;
    });
    buttonBox.getChildren().add(jupiter);

    //Saturn
    Button saturn = new Button("Saturn");
    saturn.setOnAction(e ->{
      focus = simulation.solarSystem.planets[7];
      zoom = 700;
      buttonPressed = true;
      stayZoomed = false;
    });
    buttonBox.getChildren().add(saturn);

    //Titan
    Button titan = new Button("Titan");
    titan.setOnAction(e ->{
      focus = simulation.solarSystem.planets[8];
      zoom = 700;
      buttonPressed = true;
      stayZoomed = false;
    });
    buttonBox.getChildren().add(titan);

    //Uranus
    Button uranus = new Button("Uranus");
    uranus.setOnAction(e ->{
      focus = simulation.solarSystem.planets[9];
      zoom = 700;
      buttonPressed = true;
      stayZoomed = false;
    });
    buttonBox.getChildren().add(uranus);

    //neptune
    Button neptune = new Button("Neptune");
    neptune.setOnAction(e ->{
      focus = simulation.solarSystem.planets[10];
      zoom = 700;
      buttonPressed = true;
      stayZoomed = false;
    });
    buttonBox.getChildren().add(neptune);

    //probe
    Button probe = new Button("Probe");
    probe.setOnAction(e ->{
      focus = simulation.rocket;
      zoom = 700;
      buttonPressed = true;
      stayZoomed = false;
    });
    buttonBox.getChildren().add(probe);

    //x100 playback speed button
    Button x100 = new Button("x100");
    x100.setOnAction(e ->{
      updateFactor = 100;
    });
    buttonBox.getChildren().add(x100);

    //x50 playback speed button
    Button x50 = new Button("x50");
    x50.setOnAction(e ->{
      updateFactor = 50;
    });
    buttonBox.getChildren().add(x50);

    //x1 playback speed button
    Button x1 = new Button("x1");
    x1.setOnAction(e ->{
      updateFactor = 1;
    });
    buttonBox.getChildren().add(x1);




    pane.getChildren().add(buttonBox);
    pane.getChildren().add(subScene);
    pane.setPrefSize(WIDTH, HEIGHT);
    Scene scene = new Scene(pane);
    Landing2D landingSimulation = new Landing2D(new Vector3d(0, 0, 0));
    Scene landingScene = new Scene(landingSimulation);

    initMouseControl(simulation.solarSystem, scene, primaryStage, simulation);
    //Initialize the graphics for the simulation...
    simulation.initGraphics();
    //...compute a good trajectory and launch!
    simulation.getBestTrajectory();
    final long startNanoTime = System.nanoTime();
    AnimationTimer timer = new AnimationTimer()
    {
      public void handle(long currentNanoTime)
      {
        double t = (currentNanoTime - startNanoTime) / 1000000000.0;
        if(!pause) {
          if(simulation.running) {
            for(int i = 0; i < updateFactor; i++) {
              if(!simulation.running) break;
              simulation.update();
              simulation.solarSystem.translateXProperty().set(-focus.getDrawingPosition().getX() + WIDTH/2);
              simulation.solarSystem.translateYProperty().set(-focus.getDrawingPosition().getY() + HEIGHT/2);
              if(buttonPressed) {
                simulation.solarSystem.translateZProperty().set(-focus.getDrawingPosition().getZ() + zoom);
                if(!stayZoomed) {
                  buttonPressed = false;
                }
              }
              getPivot(simulation.solarSystem);
              time++;
              if(time == simulation.closestI) {
                simulation.running = false;
                break;
              }
            }
          }
          else {
            if(!set) {
              landingSimulation.init(new Vector3d(1000, simulation.closest, Math.PI/2));
              primaryStage.setScene(landingScene);
              set = true;
            }
            else {
              landingSimulation.update();
              landingSimulation.show();
            }
          }
        }
      }
    };
    if(simulation.running == true) {
      simulation.computeSimulation(true);
      timer.start();
    }

    scene.setOnKeyPressed(e -> {
      if (e.getCode() == KeyCode.A) {
        pause = true;
      }
      if(e.getCode() == KeyCode.W) {
        pause = false;
      }
    });
    primaryStage.setTitle("Trajectory Calculator");
    primaryStage.setScene(scene);
    primaryStage.setWidth(WIDTH);
    primaryStage.setHeight(HEIGHT);
    primaryStage.setResizable(false);
    primaryStage.show();
  }
  /*
  Method containing events for different mouse controls
  */
  private void initMouseControl(Group group, Scene scene, Stage stage, ProbeSimulator rocket) {
    Rotate xRotate;
    Rotate yRotate;
    group.getTransforms().addAll(
    xRotate = new Rotate(0, Rotate.X_AXIS),
    yRotate = new Rotate(0, Rotate.Y_AXIS)
    );
    xRotate.angleProperty().bind(angleX);
    yRotate.angleProperty().bind(angleY);
    getPivot(group);

    scene.setOnMousePressed(event -> {
      anchorX = event.getSceneX();
      anchorY = event.getSceneY();
      anchorAngleX = angleX.get();
      anchorAngleY = angleY.get();
    });
    scene.setOnMouseDragged(event -> {
      angleX.set(anchorAngleX - (anchorY - event.getSceneY()));
      angleY.set(anchorAngleY + anchorX - event.getSceneX());
    });

    stage.addEventHandler(ScrollEvent.SCROLL, event -> {
      double movement = event.getDeltaY();
      group.translateZProperty().set(group.getTranslateZ() + movement * 100);
    });
  }

  public void scaleTrajectories(Group group, ProbeSimulator rocket) {
    Group curves = rocket.curveGroup;
    for(int i = 0; i < curves.getChildren().size(); i++) {
      Group curve = (Group) curves.getChildren().get(i);
      for(int j = 0; j < curve.getChildren().size(); j++) {
        Sphere point = (Sphere) curve.getChildren().get(j);
        double amount = group.getTranslateZ() / 70;
        if(amount < 70) {
          amount = 70;
        }
        else if(amount > 777) {
          amount = 777;
        }
        point.setRadius(amount);
      }
    }
  }

  public void getPivot(Group group) {
    Rotate xRotate = (Rotate) group.getTransforms().get(0);
    Rotate yRotate = (Rotate) group.getTransforms().get(1);
    xRotate.setPivotX(focus.getDrawingPosition().getX());
    xRotate.setPivotY(focus.getDrawingPosition().getY());
    xRotate.setPivotZ(focus.getDrawingPosition().getZ());
    yRotate.setPivotX(focus.getDrawingPosition().getX());
    yRotate.setPivotY(focus.getDrawingPosition().getY());
    yRotate.setPivotZ(focus.getDrawingPosition().getZ());
  }
}
